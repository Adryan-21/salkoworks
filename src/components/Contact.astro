---
---

<section id="kontakt" class="relative min-h-screen py-16 sm:py-20 lg:py-24 xl:py-32 bg-gradient-to-br from-cream-50 via-amber-50/30 to-orange-50/20 overflow-hidden" aria-labelledby="kontakt-title">
  <!-- Enhanced Background decoration with multiple layers -->
  <div class="absolute inset-0 opacity-[0.03]">
    <div class="absolute top-10 left-10 w-32 h-32 bg-amber-500 rounded-full filter blur-3xl animate-pulse"></div>
    <div class="absolute bottom-10 right-10 w-48 h-48 bg-orange-400 rounded-full filter blur-3xl animate-pulse" style="animation-delay: 1s;"></div>
    <div class="absolute top-1/2 left-1/3 w-20 h-20 bg-yellow-400 rounded-full filter blur-2xl animate-pulse" style="animation-delay: 2s;"></div>
  </div>
  
  <!-- Glassmorphism overlay -->
  <div class="absolute inset-0 bg-gradient-to-br from-white/10 via-transparent to-amber-100/5 backdrop-blur-[0.5px]"></div>
  
  <div class="container mx-auto px-4 sm:px-6 lg:px-8 xl:px-12 2xl:px-16 max-w-8xl relative z-10">
    <!-- Enhanced Header with better visual hierarchy -->
    <div class="text-center mb-16 sm:mb-20 lg:mb-24 xl:mb-28">
      <div class="relative inline-block">
        <h2 id="kontakt-title" class="text-4xl sm:text-5xl md:text-6xl lg:text-7xl xl:text-8xl font-bold tracking-tight text-amber-900 mb-6 sm:mb-8 leading-[0.9] relative z-10">
          <span class="bg-gradient-to-r from-amber-900 via-amber-800 to-orange-700 bg-clip-text text-transparent">
            Skontaktuj się ze mną
          </span>
        </h2>
        <!-- Decorative element behind title -->
        <div class="absolute -inset-4 bg-gradient-to-r from-amber-200/20 to-orange-200/20 rounded-3xl filter blur-xl -z-10 opacity-70"></div>
      </div>
      <div class="max-w-5xl mx-auto px-4">
        <p class="text-xl sm:text-2xl md:text-3xl lg:text-3xl text-amber-800/90 leading-relaxed mb-8 font-medium">
          Potrzebujesz wyceny lub masz pytania? Napisz do mnie lub zadzwoń.
        </p>
        <div class="inline-flex items-center px-6 py-3 bg-gradient-to-r from-amber-100 to-orange-100 rounded-full border border-amber-200/50 shadow-lg">
          <svg class="w-5 h-5 text-amber-600 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
          <span class="text-lg font-semibold text-amber-800">Odpowiem w ciągu <span class="text-amber-700 font-bold">24 godzin</span>!</span>
        </div>
      </div>
    </div>

    <!-- Enhanced Grid Layout with asymmetric design -->
    <div class="grid grid-cols-1 xl:grid-cols-12 gap-8 lg:gap-12 xl:gap-16 2xl:gap-20 items-start">
      <!-- Enhanced Contact Form - Taking more space -->
      <div class="xl:col-span-7 2xl:col-span-8">
        <div class="bg-white/80 backdrop-blur-xl rounded-3xl sm:rounded-4xl p-8 sm:p-10 md:p-12 lg:p-14 xl:p-16 shadow-2xl border border-white/20 hover:shadow-3xl transition-all duration-500 group relative overflow-hidden">
          <!-- Form background pattern -->
          <div class="absolute inset-0 opacity-[0.02]">
            <div class="absolute inset-0" style="background-image: radial-gradient(circle at 1px 1px, rgba(255,191,0,0.3) 1px, transparent 0); background-size: 20px 20px;"></div>
          </div>
          
          <div class="relative z-10">
            <div class="flex items-center justify-between mb-8 sm:mb-10">
              <h3 class="text-2xl sm:text-3xl lg:text-4xl font-bold text-amber-900 flex items-center">
                <div class="w-12 h-12 sm:w-14 sm:h-14 lg:w-16 lg:h-16 bg-gradient-to-br from-amber-600 to-orange-500 rounded-2xl flex items-center justify-center mr-4 sm:mr-6 group-hover:scale-110 transition-transform duration-300 shadow-lg">
                  <svg class="w-6 h-6 sm:w-7 sm:h-7 lg:w-8 lg:h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"></path>
                  </svg>
                </div>
                Napisz wiadomość
              </h3>
              <!-- Form completion indicator -->
              <div class="hidden lg:flex items-center space-x-3">
                <div class="text-sm text-amber-600 font-medium">Kompletność</div>
                <div class="w-16 h-2 bg-amber-100 rounded-full overflow-hidden">
                  <div class="bg-gradient-to-r from-amber-500 to-orange-500 h-full rounded-full transition-all duration-500 ease-out" style="width: 0%" id="mini-progress"></div>
                </div>
              </div>
            </div>
        
        <form id="contact-form" class="space-y-8 sm:space-y-10">
          <!-- Enhanced Form Fields Grid -->
          <div class="grid gap-8 sm:gap-10 sm:grid-cols-2">
            <div class="sm:col-span-1 group form-field">
              <label for="name" class="block text-base sm:text-lg font-semibold text-amber-900 mb-3 sm:mb-4 transition-colors duration-200 group-focus-within:text-amber-700">
                <span class="flex items-center">
                  <svg class="w-5 h-5 mr-2 text-amber-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                  </svg>
                  Imię <span class="text-red-500 text-xl">*</span>
                </span>
              </label>
              <div class="relative">
                <input 
                  id="name" 
                  name="name" 
                  type="text" 
                  required
                  autocomplete="given-name"
                  class="w-full px-6 py-5 border-2 border-amber-200 rounded-2xl bg-white/90 text-amber-900 placeholder-amber-400 focus:outline-none focus:ring-4 focus:ring-amber-500/30 focus:border-amber-500 transition-all duration-300 hover:border-amber-300 text-lg hover:shadow-lg focus:shadow-xl transform hover:scale-[1.01] focus:scale-[1.02] backdrop-blur-sm"
                  placeholder="Jak mam się do Ciebie zwracać?"
                />
                <div class="absolute inset-0 rounded-2xl bg-gradient-to-r from-amber-500/5 to-orange-500/5 opacity-0 pointer-events-none transition-opacity duration-300 group-focus-within:opacity-100"></div>
              </div>
              <div class="error-message hidden text-red-600 text-sm mt-2 animate-fade-in font-medium"></div>
            </div>
            
            <div class="sm:col-span-1 group form-field">
              <label for="contact" class="block text-base sm:text-lg font-semibold text-amber-900 mb-3 sm:mb-4 transition-colors duration-200 group-focus-within:text-amber-700">
                <span class="flex items-center">
                  <svg class="w-5 h-5 mr-2 text-amber-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 12a4 4 0 10-8 0 4 4 0 008 0zm0 0v1.5a2.5 2.5 0 005 0V12a9 9 0 10-9 9m4.5-1.206a8.959 8.959 0 01-4.5 1.207"></path>
                  </svg>
                  E-mail lub telefon <span class="text-red-500 text-xl">*</span>
                </span>
              </label>
              <div class="relative">
                <input 
                  id="contact" 
                  name="contact" 
                  type="text" 
                  required
                  autocomplete="email"
                  class="w-full px-6 py-5 border-2 border-amber-200 rounded-2xl bg-white/90 text-amber-900 placeholder-amber-400 focus:outline-none focus:ring-4 focus:ring-amber-500/30 focus:border-amber-500 transition-all duration-300 hover:border-amber-300 text-lg hover:shadow-lg focus:shadow-xl transform hover:scale-[1.01] focus:scale-[1.02] backdrop-blur-sm"
                  placeholder="email@example.com lub +48 123 456 789"
                />
                <div class="absolute inset-0 rounded-2xl bg-gradient-to-r from-amber-500/5 to-orange-500/5 opacity-0 pointer-events-none transition-opacity duration-300 group-focus-within:opacity-100"></div>
              </div>
              <div class="error-message hidden text-red-600 text-sm mt-2 animate-fade-in font-medium"></div>
            </div>
          </div>
          
          <div>
            <label for="service" class="block text-sm sm:text-base font-medium text-amber-900 mb-2 sm:mb-3">
              Rodzaj usługi
            </label>
            <div class="relative group">
              <select 
                id="service" 
                name="service"
                aria-describedby="service-help"
                class="w-full px-4 sm:px-5 py-3 sm:py-4 border border-amber-200 rounded-xl bg-cream-50 text-amber-900 focus:outline-none focus:ring-2 focus:ring-amber-500 focus:border-transparent transition-all duration-300 hover:border-amber-300 text-base sm:text-lg appearance-none cursor-pointer hover:shadow-md focus:shadow-lg"
              >
                <option value="">Wybierz usługę (opcjonalnie)</option>
                <option value="malowanie">Malowanie ścian</option>
                <option value="plytki">Układanie płytek</option>
                <option value="remont">Drobny remont</option>
                <option value="inne">Inne</option>
              </select>
              <div class="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                <svg class="w-5 h-5 text-amber-600 group-focus-within:text-amber-700 transition-colors duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                </svg>
              </div>
              <div class="absolute inset-0 rounded-xl bg-gradient-to-r from-amber-500/10 to-orange-500/10 opacity-0 pointer-events-none transition-opacity duration-300 group-focus-within:opacity-100"></div>
            </div>
            <p id="service-help" class="text-xs text-amber-600 mt-1">Pomoże mi lepiej przygotować wycenę</p>
          </div>
          
          <div class="group">
            <label for="message" class="block text-sm sm:text-base font-medium text-amber-900 mb-2 sm:mb-3 transition-colors duration-200 group-focus-within:text-amber-700">
              Wiadomość <span class="text-red-500">*</span>
            </label>
            <div class="relative">
              <textarea 
                id="message" 
                name="message" 
                rows="6" 
                required
                aria-describedby="message-help message-counter"
                class="w-full px-4 sm:px-5 py-3 sm:py-4 border border-amber-200 rounded-xl bg-cream-50 text-amber-900 placeholder-amber-500 focus:outline-none focus:ring-2 focus:ring-amber-500 focus:border-transparent transition-all duration-300 hover:border-amber-300 resize-vertical text-base sm:text-lg hover:shadow-md focus:shadow-lg transform hover:scale-[1.01] focus:scale-[1.02]"
                placeholder="Opisz swój projekt, powierzchnię do wykończenia, terminy..."
              ></textarea>
              <div class="absolute inset-0 rounded-xl bg-gradient-to-r from-amber-500/10 to-orange-500/10 opacity-0 pointer-events-none transition-opacity duration-300 group-focus-within:opacity-100"></div>
            </div>
            <div class="error-message hidden text-red-600 text-sm mt-1 animate-fade-in" role="alert" aria-live="polite"></div>
            <div class="flex justify-between items-center mt-2">
              <p id="message-help" class="text-xs text-amber-600">Minimum 10 znaków</p>
              <p id="message-counter" class="text-xs text-amber-600" aria-live="polite">0 znaków</p>
            </div>
          </div>
          
          <button 
            type="submit" 
            aria-describedby="submit-help"
            class="w-full bg-gradient-to-r from-amber-600 to-orange-500 text-cream-50 px-8 sm:px-10 py-4 sm:py-5 rounded-xl text-lg sm:text-xl font-medium hover:from-amber-700 hover:to-orange-600 transition-all duration-300 transform hover:scale-[1.02] shadow-lg hover:shadow-xl disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none flex items-center justify-center focus:outline-none focus:ring-2 focus:ring-amber-500 focus:ring-offset-2 focus:ring-offset-cream-50 relative overflow-hidden group"
          >
            <!-- Ripple effect -->
            <div class="absolute inset-0 bg-gradient-to-r from-white/20 to-white/10 transform scale-x-0 group-hover:scale-x-100 transition-transform duration-300 origin-left"></div>
            
            <svg class="w-5 h-5 sm:w-6 sm:h-6 mr-3 hidden loading-icon animate-spin relative z-10" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            <svg class="w-5 h-5 sm:w-6 sm:h-6 mr-3 send-icon relative z-10 transform group-hover:translate-x-1 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"></path>
            </svg>
            <span class="button-text relative z-10">Wyślij wiadomość</span>
          </button>
          <p id="submit-help" class="text-xs text-amber-600 mt-2 text-center">Odpiszę w ciągu 24 godzin</p>
          
          <!-- Success/Error Messages -->
          <div id="form-success" class="hidden bg-gradient-to-r from-green-100 to-green-50 border border-green-400 text-green-700 px-4 sm:px-6 py-4 rounded-xl shadow-lg animate-fade-in" role="alert" aria-live="polite">
            <div class="flex items-center">
              <div class="w-8 h-8 bg-green-500 rounded-full flex items-center justify-center mr-3 flex-shrink-0">
                <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                </svg>
              </div>
              <div>
                <div class="font-semibold text-green-800">Wiadomość wysłana!</div>
                <div class="text-sm text-green-700">Odpiszę w ciągu 24 godzin. Sprawdź także folder spam.</div>
              </div>
            </div>
          </div>
          
          <div id="form-error" class="hidden bg-gradient-to-r from-red-100 to-red-50 border border-red-400 text-red-700 px-4 sm:px-6 py-4 rounded-xl shadow-lg animate-fade-in" role="alert" aria-live="polite">
            <div class="flex items-center">
              <div class="w-8 h-8 bg-red-500 rounded-full flex items-center justify-center mr-3 flex-shrink-0">
                <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01"></path>
                </svg>
              </div>
              <div>
                <div class="font-semibold text-red-800">Wystąpił błąd</div>
                <div class="text-sm text-red-700">Spróbuj ponownie lub zadzwoń bezpośrednio.</div>
              </div>
            </div>
          </div>
          </div>
        </div>
      </div>

      <!-- Enhanced Contact Info Sidebar - Sticky positioned -->
      <div class="xl:col-span-5 2xl:col-span-4 space-y-6 lg:space-y-8 xl:sticky xl:top-8 xl:self-start">

        <!-- Enhanced Contact Information -->
        <div class="bg-cream-50/90 backdrop-blur-sm rounded-2xl sm:rounded-3xl p-6 sm:p-8 lg:p-10 xl:p-12 shadow-xl border border-amber-200/40 hover:shadow-2xl transition-all duration-300 group">
          <h3 class="text-xl sm:text-2xl font-semibold text-amber-900 mb-6 sm:mb-8 flex items-center">
            <div class="w-8 h-8 sm:w-10 sm:h-10 bg-gradient-to-br from-amber-600 to-orange-500 rounded-xl flex items-center justify-center mr-3 sm:mr-4 group-hover:scale-110 transition-transform duration-300">
              <svg class="w-4 h-4 sm:w-5 sm:h-5 text-cream-50" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"></path>
              </svg>
            </div>
            Dane kontaktowe
          </h3>
          
          <div class="space-y-4 sm:space-y-6">
            <div class="flex items-center p-4 sm:p-6 bg-gradient-to-r from-amber-100 to-orange-100 rounded-xl hover:from-amber-200 hover:to-orange-200 transition-all duration-300 group/item relative overflow-hidden">
              <div class="absolute inset-0 bg-gradient-to-r from-amber-500/10 to-orange-500/10 opacity-0 group-hover/item:opacity-100 transition-opacity duration-300"></div>
              <div class="w-12 h-12 sm:w-16 sm:h-16 bg-gradient-to-br from-amber-600 to-orange-500 rounded-xl flex items-center justify-center mr-4 sm:mr-6 group-hover/item:scale-110 transition-transform duration-300 relative z-10">
                <svg class="w-6 h-6 sm:w-8 sm:h-8 text-cream-50" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
                </svg>
              </div>
              <div class="relative z-10 flex-1">
                <div class="font-semibold text-amber-900 text-lg sm:text-xl">E-mail</div>
                <div class="text-amber-700 text-base sm:text-lg">adres-email@kolegi.pl</div>
              </div>
              <button 
                onclick="copyToClipboard('adres-email@kolegi.pl', this)"
                class="ml-2 p-2 rounded-lg bg-amber-600/10 hover:bg-amber-600/20 transition-colors duration-200 relative z-10"
                title="Skopiuj email"
              >
                <svg class="w-4 h-4 text-amber-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
                </svg>
              </button>
            </div>
            
            <div class="flex items-center p-4 sm:p-6 bg-gradient-to-r from-amber-100 to-orange-100 rounded-xl hover:from-amber-200 hover:to-orange-200 transition-all duration-300 group/item relative overflow-hidden">
              <div class="absolute inset-0 bg-gradient-to-r from-amber-500/10 to-orange-500/10 opacity-0 group-hover/item:opacity-100 transition-opacity duration-300"></div>
              <div class="w-12 h-12 sm:w-16 sm:h-16 bg-gradient-to-br from-amber-600 to-orange-500 rounded-xl flex items-center justify-center mr-4 sm:mr-6 group-hover/item:scale-110 transition-transform duration-300 relative z-10">
                <svg class="w-6 h-6 sm:w-8 sm:h-8 text-cream-50" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"></path>
                </svg>
              </div>
              <div class="relative z-10 flex-1">
                <div class="font-semibold text-amber-900 text-lg sm:text-xl">Telefon</div>
                <div class="text-amber-700 text-base sm:text-lg">+48 123 123 123</div>
              </div>
              <button 
                onclick="copyToClipboard('+48123123123', this)"
                class="ml-2 p-2 rounded-lg bg-amber-600/10 hover:bg-amber-600/20 transition-colors duration-200 relative z-10"
                title="Skopiuj numer"
              >
                <svg class="w-4 h-4 text-amber-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
                </svg>
              </button>
            </div>
          </div>
          
          <div class="mt-8 border-t border-amber-200 pt-6">
            <h4 class="text-lg font-semibold text-amber-900 mb-4 flex items-center">
              <svg class="w-5 h-5 mr-2 text-amber-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
              Godziny pracy
            </h4>
            
            <div class="space-y-3 text-amber-800 text-base">
              <div class="flex justify-between items-center p-3 rounded-lg hover:bg-amber-50 transition-colors duration-200">
                <span class="font-medium">Poniedziałek - Piątek</span>
                <span class="flex items-center">
                  <div class="w-2 h-2 bg-green-500 rounded-full mr-2 animate-pulse"></div>
                  8:00 - 18:00
                </span>
              </div>
              <div class="flex justify-between items-center p-3 rounded-lg hover:bg-amber-50 transition-colors duration-200">
                <span class="font-medium">Sobota</span>
                <span class="flex items-center">
                  <div class="w-2 h-2 bg-yellow-500 rounded-full mr-2"></div>
                  9:00 - 15:00
                </span>
              </div>
              <div class="flex justify-between items-center p-3 rounded-lg hover:bg-amber-50 transition-colors duration-200">
                <span class="font-medium">Niedziela</span>
                <span class="text-amber-600 flex items-center">
                  <div class="w-2 h-2 bg-red-500 rounded-full mr-2"></div>
                  Zamknięte
                </span>
              </div>
            </div>
            
            <div class="mt-6 p-4 bg-gradient-to-r from-amber-100 to-orange-100 rounded-xl border border-amber-200">
              <div class="flex items-start">
                <div class="text-2xl mr-3">💡</div>
                <div>
                  <p class="text-sm text-amber-800">
                    <strong>Wskazówka:</strong> Najlepszy czas na rozmowę to godziny 9:00-17:00 w dni robocze.
                  </p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('contact-form') as HTMLFormElement;
    const submitButton = form?.querySelector('button[type="submit"]') as HTMLButtonElement;
    const buttonText = submitButton?.querySelector('.button-text') as HTMLSpanElement;
    const loadingIcon = submitButton?.querySelector('.loading-icon') as HTMLElement;
    const sendIcon = submitButton?.querySelector('.send-icon') as HTMLElement;
    const successMessage = document.getElementById('form-success') as HTMLElement;
    const errorMessage = document.getElementById('form-error') as HTMLElement;
    
    if (!form || !submitButton || !buttonText || !loadingIcon || !sendIcon || !successMessage || !errorMessage) {
      console.error('Required form elements not found');
      return;
    }
    
    // Auto-save functionality with localStorage
    const STORAGE_KEY = 'contact-form-data';
    const STORAGE_TIMESTAMP_KEY = 'contact-form-timestamp';
    
    // Copy to clipboard functionality
    (window as any).copyToClipboard = function(text: string, button: HTMLElement): void {
      navigator.clipboard.writeText(text).then(() => {
        const originalHTML = button.innerHTML;
        button.innerHTML = `
          <svg class="w-4 h-4 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
          </svg>
        `;
        button.classList.add('bg-green-600/20');
        
        setTimeout(() => {
          button.innerHTML = originalHTML;
          button.classList.remove('bg-green-600/20');
        }, 2000);
      }).catch(() => {
        // Fallback for older browsers
        const textArea = document.createElement('textarea');
        textArea.value = text;
        document.body.appendChild(textArea);
        textArea.select();
        document.execCommand('copy');
        document.body.removeChild(textArea);
      });
    };
    
    // Enhanced validation patterns
    const emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    const phonePattern = /^[+]?[0-9\s\-()]{9,}$/;
    
    // Debounced validation
    const debounce = (func: Function, wait: number) => {
      let timeout: NodeJS.Timeout;
      return function executedFunction(...args: any[]) {
        const later = () => {
          clearTimeout(timeout);
          func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
      };
    };
    
    // Phone number auto-formatting
    function formatPhoneNumber(value: string): string {
      const numbers = value.replace(/\D/g, '');
      if (numbers.startsWith('48')) {
        return `+48 ${numbers.slice(2, 5)} ${numbers.slice(5, 8)} ${numbers.slice(8, 11)}`.trim();
      } else if (numbers.length >= 9) {
        return `${numbers.slice(0, 3)} ${numbers.slice(3, 6)} ${numbers.slice(6, 9)}`.trim();
      }
      return value;
    }
    
    // Enhanced field validation
    function validateField(field: HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement, showError: boolean = true): boolean {
      const value = field.value.trim();
      const errorDiv = field.closest('.group')?.querySelector('.error-message') || field.parentNode?.querySelector('.error-message') as HTMLElement;
      
      if (!errorDiv) return true;
      
      // Clear previous errors
      field.classList.remove('border-red-500', 'border-green-500');
      if (showError) {
        errorDiv.classList.add('hidden');
      }
      
      if (field.hasAttribute('required') && !value) {
        if (showError) {
          showFieldError(field, 'To pole jest wymagane');
        }
        return false;
      }
      
      // Specific validations
      if (field.id === 'name' && value && value.length < 2) {
        if (showError) {
          showFieldError(field, 'Imię musi mieć co najmniej 2 znaki');
        }
        return false;
      }
      
      if (field.id === 'contact' && value) {
        if (!emailPattern.test(value) && !phonePattern.test(value.replace(/\s/g, ''))) {
          if (showError) {
            showFieldError(field, 'Podaj prawidłowy email lub numer telefonu');
          }
          return false;
        }
      }
      
      if (field.id === 'message' && value && value.length < 10) {
        if (showError) {
          showFieldError(field, 'Wiadomość musi mieć co najmniej 10 znaków');
        }
        return false;
      }
      
      // Show success state for valid fields
      if (value && field.hasAttribute('required')) {
        field.classList.add('border-green-500');
      }
      
      return true;
    }
    
    function showFieldError(field: HTMLElement, message: string): void {
      field.classList.add('border-red-500');
      field.classList.remove('border-green-500');
      const errorDiv = field.closest('.group')?.querySelector('.error-message') || field.parentNode?.querySelector('.error-message') as HTMLElement;
      if (errorDiv) {
        errorDiv.textContent = message;
        errorDiv.classList.remove('hidden');
      }
    }
    
    // Debounced validation
    const debouncedValidation = debounce((field: HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement) => {
      validateField(field);
    }, 300);
    
    // Real-time validation and auto-save
    form.querySelectorAll('input, textarea, select').forEach(field => {
      const typedField = field as HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement;
      
      typedField.addEventListener('blur', () => {
        validateField(typedField);
      });
      
      typedField.addEventListener('input', (e) => {
        // Auto-format phone numbers
        if (typedField.id === 'contact' && typedField instanceof HTMLInputElement) {
          const cursorPosition = typedField.selectionStart;
          const oldLength = typedField.value.length;
          typedField.value = formatPhoneNumber(typedField.value);
          const newLength = typedField.value.length;
          
          // Maintain cursor position
          if (cursorPosition !== null) {
            typedField.setSelectionRange(cursorPosition + (newLength - oldLength), cursorPosition + (newLength - oldLength));
          }
        }
        
        // Clear error state on input
        if (typedField.classList.contains('border-red-500')) {
          typedField.classList.remove('border-red-500');
          const errorDiv = typedField.closest('.group')?.querySelector('.error-message') || typedField.parentNode?.querySelector('.error-message') as HTMLElement;
          if (errorDiv) {
            errorDiv.classList.add('hidden');
          }
        }
        
        debouncedValidation(typedField);
      });
    });
    
    // Character counter for textarea
    const messageField = document.getElementById('message') as HTMLTextAreaElement;
    const messageCounter = document.getElementById('message-counter') as HTMLElement;
    
    if (messageField && messageCounter) {
      function updateCharCounter(): void {
        const current = messageField.value.length;
        messageCounter.textContent = `${current} znaków`;
        
        if (current < 10 && current > 0) {
          messageCounter.classList.add('text-red-500');
          messageCounter.classList.remove('text-amber-600', 'text-green-600');
        } else if (current >= 10) {
          messageCounter.classList.add('text-green-600');
          messageCounter.classList.remove('text-amber-600', 'text-red-500');
        } else {
          messageCounter.classList.add('text-amber-600');
          messageCounter.classList.remove('text-red-500', 'text-green-600');
        }
      }
      
      messageField.addEventListener('input', updateCharCounter);
      updateCharCounter();
    }
    
    // Form submission with enhanced UX
    form.addEventListener('submit', async function(e: Event) {
      e.preventDefault();
      
      // Hide previous messages
      successMessage.classList.add('hidden');
      errorMessage.classList.add('hidden');
      
      // Validate all fields
      const fields = form.querySelectorAll('input[required], textarea[required]');
      let isValid = true;
      
      fields.forEach(field => {
        const typedField = field as HTMLInputElement | HTMLTextAreaElement;
        if (!validateField(typedField)) {
          isValid = false;
        }
      });
      
      if (!isValid) {
        // Scroll to first error with smooth animation
        const firstError = form.querySelector('.border-red-500') as HTMLElement;
        if (firstError) {
          firstError.scrollIntoView({ behavior: 'smooth', block: 'center' });
          setTimeout(() => firstError.focus(), 500);
        }
        return;
      }
      
      // Show loading state with ripple effect
      submitButton.disabled = true;
      buttonText.textContent = 'Wysyłanie...';
      loadingIcon.classList.remove('hidden');
      sendIcon.classList.add('hidden');
      submitButton.classList.add('scale-95');
      
      try {
        // Simulate form submission (replace with actual API call)
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // Show success message with animation
        successMessage.classList.remove('hidden');
        successMessage.scrollIntoView({ behavior: 'smooth', block: 'center' });
        
        // Clear form
        form.reset();
        
        // Hide success message after 15 seconds
        setTimeout(() => {
          successMessage.classList.add('hidden');
        }, 15000);
        
        // Analytics event (if implemented)
        if (typeof (window as any).gtag !== 'undefined') {
          (window as any).gtag('event', 'form_submit', {
            'event_category': 'contact',
            'event_label': 'contact_form'
          });
        }
        
      } catch (error) {
        console.error('Form submission error:', error);
        errorMessage.classList.remove('hidden');
        errorMessage.scrollIntoView({ behavior: 'smooth', block: 'center' });
        
        // Analytics error event
        if (typeof (window as any).gtag !== 'undefined') {
          (window as any).gtag('event', 'form_error', {
            'event_category': 'contact',
            'event_label': 'contact_form_error'
          });
        }
      } finally {
        // Reset button state
        submitButton.disabled = false;
        buttonText.textContent = 'Wyślij wiadomość';
        loadingIcon.classList.add('hidden');
        sendIcon.classList.remove('hidden');
        submitButton.classList.remove('scale-95');
      }
    });
    
    // Keyboard navigation improvements
    form.addEventListener('keydown', function(e: KeyboardEvent) {
      if (e.key === 'Enter' && e.target instanceof HTMLInputElement) {
        e.preventDefault();
        const formElements = Array.from(form.querySelectorAll('input, textarea, select, button'));
        const currentIndex = formElements.indexOf(e.target);
        const nextElement = formElements[currentIndex + 1] as HTMLElement;
        
        if (nextElement) {
          nextElement.focus();
        }
      }
    });
    
    // Intersection Observer for lazy loading animations
    const observerOptions = {
      threshold: 0.1,
      rootMargin: '0px 0px -50px 0px'
    };
    
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('animate-fade-in');
          observer.unobserve(entry.target);
        }
      });
    }, observerOptions);
    
    // Observe form sections for staggered animations
    form.querySelectorAll('.group, .bg-cream-50\\/90').forEach(element => {
      observer.observe(element);
    });
  });
</script>

<style>
  /* Custom cream colors and enhanced color palette */
  .bg-cream-50 {
    background-color: #fffbf0;
  }
  
  .text-cream-50 {
    color: #fffbf0;
  }
  
  /* Advanced Container and Grid Systems */
  .max-w-8xl {
    max-width: 90rem;
  }
  
  .rounded-4xl {
    border-radius: 2rem;
  }
  
  /* Enhanced Glassmorphism Effects */
  .glass-effect {
    background: rgba(255, 255, 255, 0.25);
    backdrop-filter: blur(20px);
    border: 1px solid rgba(255, 255, 255, 0.18);
  }
  
  /* Advanced Shadow System */
  .shadow-3xl {
    box-shadow: 
      0 35px 60px -12px rgba(0, 0, 0, 0.15),
      0 25px 25px -5px rgba(0, 0, 0, 0.1),
      0 0 0 1px rgba(255, 255, 255, 0.05);
  }
  
  /* Enhanced Grid Layout */
  @supports (display: grid) {
    .enhanced-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 2rem;
    }
    
    @media (min-width: 1280px) {
      .enhanced-grid {
        grid-template-columns: 2fr 1fr;
      }
    }
  }
  
  /* Advanced Typography */
  .text-gradient {
    background: linear-gradient(135deg, #92400e, #d97706, #f59e0b);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    background-size: 200% 200%;
    animation: gradient-shift 3s ease-in-out infinite;
  }
  
  @keyframes gradient-shift {
    0%, 100% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
  }
  
  /* Enhanced Form Styling */
  .form-field {
    position: relative;
    isolation: isolate;
  }
  
  .form-field::before {
    content: '';
    position: absolute;
    inset: 0;
    border-radius: inherit;
    padding: 2px;
    background: linear-gradient(135deg, transparent, rgba(245, 158, 11, 0.1), transparent);
    mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);
    mask-composite: xor;
    opacity: 0;
    transition: opacity 0.3s ease;
  }
  
  .form-field:focus-within::before {
    opacity: 1;
  }
  
  /* Smooth scrolling with easing */
  html {
    scroll-behavior: smooth;
  }
  
  @media (prefers-reduced-motion: no-preference) {
    html {
      scroll-behavior: smooth;
    }
  }
  
  /* Enhanced focus states with improved accessibility */
  input:focus, textarea:focus, select:focus {
    box-shadow: 
      0 0 0 4px rgba(245, 158, 11, 0.1),
      0 8px 25px -5px rgba(0, 0, 0, 0.1);
  }
  
  /* Enhanced animations with performance optimization */
  @keyframes fadeIn {
    from { 
      opacity: 0; 
      transform: translateY(30px) scale(0.95); 
    }
    to { 
      opacity: 1; 
      transform: translateY(0) scale(1); 
    }
  }
  
  @keyframes slideInFromLeft {
    from {
      opacity: 0;
      transform: translateX(-50px) rotate(-5deg);
    }
    to {
      opacity: 1;
      transform: translateX(0) rotate(0deg);
    }
  }
  
  @keyframes slideInFromRight {
    from {
      opacity: 0;
      transform: translateX(50px) rotate(5deg);
    }
    to {
      opacity: 1;
      transform: translateX(0) rotate(0deg);
    }
  }
  
  @keyframes bounceIn {
    0% {
      opacity: 0;
      transform: scale(0.3) rotate(-10deg);
    }
    50% {
      opacity: 1;
      transform: scale(1.05) rotate(2deg);
    }
    70% {
      transform: scale(0.95) rotate(-1deg);
    }
    100% {
      opacity: 1;
      transform: scale(1) rotate(0deg);
    }
  }
  
  @keyframes pulse {
    0%, 100% {
      opacity: 1;
      transform: scale(1);
    }
    50% {
      opacity: 0.8;
      transform: scale(1.05);
    }
  }
  
  @keyframes float {
    0%, 100% {
      transform: translateY(0px);
    }
    50% {
      transform: translateY(-10px);
    }
  }
  
  /* Optimized animation classes */
  .animate-fade-in {
    animation: fadeIn 0.8s cubic-bezier(0.4, 0, 0.2, 1) forwards;
  }
  
  .animate-slide-in-left {
    animation: slideInFromLeft 0.8s cubic-bezier(0.4, 0, 0.2, 1) forwards;
  }
  
  .animate-slide-in-right {
    animation: slideInFromRight 0.8s cubic-bezier(0.4, 0, 0.2, 1) forwards;
  }
  
  .animate-bounce-in {
    animation: bounceIn 1s cubic-bezier(0.4, 0, 0.2, 1) forwards;
  }
  
  .animate-float {
    animation: float 6s ease-in-out infinite;
  }
  
  /* Loading animations */
  .animate-spin {
    animation: spin 1s linear infinite;
  }
  
  .animate-pulse {
    animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
  }
  
  @keyframes spin {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
  }
  
  /* Advanced interaction effects */
  .ripple-effect {
    position: relative;
    overflow: hidden;
  }
  
  .ripple-effect::before {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: 0;
    height: 0;
    border-radius: 50%;
    background: rgba(255, 255, 255, 0.6);
    transform: translate(-50%, -50%);
    transition: width 0.6s, height 0.6s;
  }
  
  .ripple-effect:active::before {
    width: 300px;
    height: 300px;
  }
  
  /* Enhanced hover effects */
  .hover-lift {
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
  }
  
  .hover-lift:hover {
    transform: translateY(-8px) scale(1.02);
    box-shadow: 
      0 25px 50px -12px rgba(0, 0, 0, 0.25),
      0 20px 25px -5px rgba(0, 0, 0, 0.1);
  }
  
  /* Advanced button states */
  .btn-primary {
    position: relative;
    background: linear-gradient(135deg, #d97706, #ea580c);
    transition: all 0.3s ease;
  }
  
  .btn-primary:hover {
    background: linear-gradient(135deg, #b45309, #dc2626);
    transform: translateY(-2px);
  }
  
  .btn-primary:active {
    transform: translateY(0);
  }
  
  /* Form enhancements */
  .form-container {
    position: relative;
  }
  
  .form-container::before {
    content: '';
    position: absolute;
    inset: -2px;
    background: linear-gradient(45deg, #f59e0b, #ea580c, #f59e0b);
    border-radius: inherit;
    opacity: 0;
    transition: opacity 0.3s ease;
    z-index: -1;
  }
  
  .form-container:focus-within::before {
    opacity: 0.1;
  }
  
  /* Mobile optimizations */
  @media (max-width: 640px) {
    .container {
      padding-left: 1rem;
      padding-right: 1rem;
    }
    
    /* Optimize animations for mobile */
    .animate-fade-in,
    .animate-slide-in-left,
    .animate-slide-in-right,
    .animate-bounce-in {
      animation-duration: 0.6s;
    }
  }
  
  /* Reduce motion preferences */
  @media (prefers-reduced-motion: reduce) {
    * {
      animation-duration: 0.01ms !important;
      animation-iteration-count: 1 !important;
      transition-duration: 0.01ms !important;
    }
    
    .animate-pulse,
    .animate-float {
      animation: none;
    }
  }
  
  /* High contrast mode support */
  @media (prefers-contrast: high) {
    .bg-cream-50 {
      background-color: #ffffff;
    }
    
    .border-amber-200 {
      border-color: #000000;
      border-width: 2px;
    }
    
    .text-amber-900 {
      color: #000000;
    }
  }
    
  /* Enhanced scrollbar with modern styling */
  ::-webkit-scrollbar {
    width: 12px;
  }
  
  ::-webkit-scrollbar-track {
    background: linear-gradient(180deg, #f7fafc, #edf2f7);
    border-radius: 6px;
  }
  
  ::-webkit-scrollbar-thumb {
    background: linear-gradient(180deg, #d97706, #ea580c);
    border-radius: 6px;
    border: 2px solid #f7fafc;
  }
  
  ::-webkit-scrollbar-thumb:hover {
    background: linear-gradient(180deg, #b45309, #dc2626);
  }
  
  /* Focus management */
  .focus\\:ring-amber-500:focus {
    --tw-ring-color: rgb(245 158 11 / var(--tw-ring-opacity));
  }
  
  /* Enhanced transitions */
  .transition-all {
    transition-property: all;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    transition-duration: 300ms;
  }
  
  /* Staggered animations for better UX */
  .form-field:nth-child(1) { animation-delay: 0.1s; }
  .form-field:nth-child(2) { animation-delay: 0.2s; }
  .form-field:nth-child(3) { animation-delay: 0.3s; }
  .form-field:nth-child(4) { animation-delay: 0.4s; }
  .form-field:nth-child(5) { animation-delay: 0.5s; }
  
  /* Loading states */
  .loading-overlay {
    position: absolute;
    inset: 0;
    background: rgba(255, 255, 255, 0.9);
    backdrop-filter: blur(4px);
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: inherit;
    z-index: 50;
  }
  
  /* Success and error animations */
  .success-checkmark {
    animation: bounceIn 0.8s ease-out;
  }
  
  .error-shake {
    animation: shake 0.6s ease-in-out;
  }
  
  @keyframes shake {
    0%, 100% { transform: translateX(0); }
    10%, 30%, 50%, 70%, 90% { transform: translateX(-8px); }
    20%, 40%, 60%, 80% { transform: translateX(8px); }
  }
  
  /* Advanced layout utilities */
  .sticky-sidebar {
    position: sticky;
    top: 2rem;
    align-self: start;
  }
  
  /* Performance optimizations */
  .gpu-accelerated {
    transform: translateZ(0);
    backface-visibility: hidden;
    perspective: 1000px;
  }
  
  /* Custom scroll snap for better mobile experience */
  .scroll-snap-container {
    scroll-snap-type: y mandatory;
  }
  
  .scroll-snap-item {
    scroll-snap-align: start;
  }
</style>

<script>
  interface FormData {
    name: string;
    email: string;
    phone: string;
    company?: string;
    message: string;
  }
  
  interface ValidationResult {
    isValid: boolean;
    errors: Record<string, string>;
  }
  
  class ContactFormManager {
    private form: HTMLFormElement;
    private autoSaveIndicator: HTMLElement | null;
    private submitButton: HTMLButtonElement | null;
    private loadingOverlay: HTMLElement | null;
    private autoSaveTimer: ReturnType<typeof setTimeout> | null = null;
    private hasUnsavedChanges = false;

    constructor() {
      this.form = document.getElementById('contact-form') as HTMLFormElement;
      this.autoSaveIndicator = document.getElementById('auto-save-indicator');
      this.submitButton = document.getElementById('submit-button') as HTMLButtonElement;
      this.loadingOverlay = document.getElementById('loading-overlay');
      
      this.init();
    }

    private init(): void {
      this.setupEventListeners();
      this.loadSavedData();
      this.setupIntersectionObserver();
      this.setupKeyboardNavigation();
      this.setupFormValidation();
    }

    private setupEventListeners(): void {
      // Form submission
      this.form?.addEventListener('submit', this.handleSubmit.bind(this));
      
      // Progress tracking
      const inputs = this.form?.querySelectorAll('input, textarea, select');
      inputs?.forEach(input => {
        input.addEventListener('input', () => {
          this.scheduleAutoSave();
          this.validateField(input as HTMLInputElement);
        });
        
        input.addEventListener('blur', () => {
          this.validateField(input as HTMLInputElement);
        });

        // Add focus effects
        input.addEventListener('focus', () => {
          this.addFocusEffect(input as HTMLElement);
        });
      });

      // Copy buttons
      this.setupCopyButtons();
      
      // Quick action buttons
      this.setupQuickActions();
      
      // Auto-save status updates
      this.setupAutoSaveListeners();
    }

    private setupCopyButtons(): void {
      const copyButtons = document.querySelectorAll('[data-copy]');
      copyButtons.forEach(button => {
        button.addEventListener('click', async (e) => {
          e.preventDefault();
          const textToCopy = button.getAttribute('data-copy');
          if (textToCopy) {
            try {
              await navigator.clipboard.writeText(textToCopy);
              this.showToast('Skopiowano do schowka!', 'success');
              this.addRippleEffect(button as HTMLElement);
            } catch (err) {
              this.showToast('Błąd kopiowania', 'error');
            }
          }
        });
      });
    }

    private setupQuickActions(): void {
      // WhatsApp button
      const whatsappButton = document.querySelector('[data-whatsapp]');
      whatsappButton?.addEventListener('click', () => {
        const message = encodeURIComponent('Dzień dobry! Chciałbym/chciałabym dowiedzieć się więcej o Państwa usługach.');
        window.open(`https://wa.me/48123456789?text=${message}`, '_blank');
      });

      // Call button
      const callButton = document.querySelector('[data-call]');
      callButton?.addEventListener('click', () => {
        window.location.href = 'tel:+48123456789';
      });
    }

    private addRippleEffect(element: HTMLElement): void {
      element.classList.add('ripple-effect');
      setTimeout(() => {
        element.classList.remove('ripple-effect');
      }, 600);
    }

    private addFocusEffect(element: HTMLElement): void {
      const parent = element.closest('.form-field');
      parent?.classList.add('focused');
      
      element.addEventListener('blur', () => {
        parent?.classList.remove('focused');
      }, { once: true });
    }

    private validateField(input: HTMLInputElement): void {
      const result = this.validateSingleField(input);
      const errorElement = document.getElementById(`${input.name}-error`);
      const fieldContainer = input.closest('.form-field');
      
      if (errorElement) {
        if (result.isValid) {
          errorElement.style.display = 'none';
          input.classList.remove('border-red-300', 'error-shake');
          input.classList.add('border-green-300');
          fieldContainer?.classList.add('success');
        } else {
          errorElement.textContent = result.errors[input.name] || '';
          errorElement.style.display = 'block';
          input.classList.remove('border-green-300');
          input.classList.add('border-red-300', 'error-shake');
          fieldContainer?.classList.remove('success');
          
          // Remove shake class after animation
          setTimeout(() => {
            input.classList.remove('error-shake');
          }, 600);
        }
      }
    }

    private validateSingleField(input: HTMLInputElement): ValidationResult {
      const errors: Record<string, string> = {};
      let isValid = true;

      if (input.required && !input.value.trim()) {
        errors[input.name] = 'To pole jest wymagane';
        isValid = false;
      } else {
        switch (input.type) {
          case 'email':
            const emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            if (input.value && !emailPattern.test(input.value)) {
              errors[input.name] = 'Wprowadź poprawny adres email';
              isValid = false;
            }
            break;
          case 'tel':
            const phonePattern = /^[+]?[0-9\s\-()]{9,}$/;
            if (input.value && !phonePattern.test(input.value)) {
              errors[input.name] = 'Wprowadź poprawny numer telefonu';
              isValid = false;
            }
            break;
        }

        // Name validation
        if (input.name === 'name' && input.value.length < 2) {
          errors[input.name] = 'Imię musi mieć co najmniej 2 znaki';
          isValid = false;
        }

        // Message validation
        if (input.name === 'message' && input.value.length < 10) {
          errors[input.name] = 'Wiadomość musi mieć co najmniej 10 znaków';
          isValid = false;
        }
      }

      return { isValid, errors };
    }

    private validateForm(): ValidationResult {
      const inputs = this.form?.querySelectorAll('input[required], textarea[required], select[required]') as NodeListOf<HTMLInputElement>;
      let isValid = true;
      const errors: Record<string, string> = {};

      inputs?.forEach(input => {
        const result = this.validateSingleField(input);
        if (!result.isValid) {
          isValid = false;
          Object.assign(errors, result.errors);
        }
      });

      return { isValid, errors };
    }

    private setupFormValidation(): void {
      // Real-time phone formatting
      const phoneInput = document.getElementById('phone') as HTMLInputElement;
      phoneInput?.addEventListener('input', (e) => {
        const target = e.target as HTMLInputElement;
        let value = target.value.replace(/\D/g, '');
        
        if (value.length > 0) {
          if (value.startsWith('48')) {
            value = '+48 ' + value.substring(2).replace(/(\d{3})(\d{3})(\d{3})/, '$1 $2 $3');
          } else {
            value = value.replace(/(\d{3})(\d{3})(\d{3})/, '$1 $2 $3');
          }
        }
        
        target.value = value;
      });
    }

    private async handleSubmit(e: Event): Promise<void> {
      e.preventDefault();
      
      const validation = this.validateForm();
      if (!validation.isValid) {
        this.showToast('Proszę poprawić błędy w formularzu', 'error');
        return;
      }

      this.showLoadingOverlay(true);
      
      try {
        const formData = new FormData(this.form);
        const data = Object.fromEntries(formData.entries());

        // Simulate API call
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // Track with Google Analytics if available
        if (typeof (window as any).gtag !== 'undefined') {
          (window as any).gtag('event', 'form_submit', {
            event_category: 'engagement',
            event_label: 'contact_form'
          });
        }

        this.showLoadingOverlay(false);
        this.showSuccessMessage();
        this.clearForm();
        this.clearSavedData();
        
      } catch (error) {
        this.showLoadingOverlay(false);
        this.showToast('Wystąpił błąd podczas wysyłania. Spróbuj ponownie.', 'error');
      }
    }

    private showLoadingOverlay(show: boolean): void {
      if (this.loadingOverlay) {
        this.loadingOverlay.style.display = show ? 'flex' : 'none';
      }
    }

    private showSuccessMessage(): void {
      const successMessage = document.createElement('div');
      successMessage.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';
      successMessage.innerHTML = `
        <div class="bg-white p-8 rounded-2xl max-w-md mx-4 text-center animate-bounce-in">
          <div class="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
            <svg class="w-8 h-8 text-green-600 success-checkmark" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
            </svg>
          </div>
          <h3 class="text-xl font-bold text-gray-900 mb-2">Dziękujemy!</h3>
          <p class="text-gray-600 mb-4">Twoja wiadomość została wysłana pomyślnie. Odpowiemy wkrótce.</p>
          <button onclick="this.parentElement.parentElement.remove()" 
                  class="bg-amber-600 text-white px-6 py-2 rounded-lg hover:bg-amber-700 transition-colors">
            Zamknij
          </button>
        </div>
      `;
      
      document.body.appendChild(successMessage);
      
      // Auto remove after 5 seconds
      setTimeout(() => {
        successMessage.remove();
      }, 5000);
    }

    private showToast(message: string, type: 'success' | 'error' | 'info' = 'info'): void {
      const toast = document.createElement('div');
      const bgColor = type === 'success' ? 'bg-green-500' : type === 'error' ? 'bg-red-500' : 'bg-blue-500';
      
      toast.className = `fixed top-4 right-4 ${bgColor} text-white px-6 py-3 rounded-lg shadow-lg z-50 animate-slide-in-right`;
      toast.textContent = message;
      
      document.body.appendChild(toast);
      
      setTimeout(() => {
        toast.classList.add('animate-fade-out');
        setTimeout(() => toast.remove(), 300);
      }, 3000);
    }

    private clearForm(): void {
      this.form?.reset();
      
      // Clear validation states
      const inputs = this.form?.querySelectorAll('input, textarea, select');
      inputs?.forEach(input => {
        input.classList.remove('border-green-300', 'border-red-300');
        const fieldContainer = input.closest('.form-field');
        fieldContainer?.classList.remove('success');
      });
    }

    private scheduleAutoSave(): void {
      this.hasUnsavedChanges = true;
      
      if (this.autoSaveTimer) {
        clearTimeout(this.autoSaveTimer);
      }
      
      this.autoSaveTimer = setTimeout(() => {
        this.autoSave();
      }, 2000);
    }

    private autoSave(): void {
      if (!this.hasUnsavedChanges) return;
      
      const formData = new FormData(this.form);
      const data = Object.fromEntries(formData.entries());
      
      try {
        localStorage.setItem('contactFormData', JSON.stringify(data));
        this.showAutoSaveStatus('saved');
        this.hasUnsavedChanges = false;
      } catch (error) {
        this.showAutoSaveStatus('error');
      }
    }

    private showAutoSaveStatus(status: 'saving' | 'saved' | 'error'): void {
      if (!this.autoSaveIndicator) return;
      
      const statusConfig = {
        saving: { text: 'Zapisywanie...', class: 'text-yellow-600', icon: 'animate-spin' },
        saved: { text: 'Zapisano', class: 'text-green-600', icon: '' },
        error: { text: 'Błąd zapisu', class: 'text-red-600', icon: '' }
      };
      
      const config = statusConfig[status];
      this.autoSaveIndicator.innerHTML = `
        <svg class="w-4 h-4 mr-1 ${config.icon}" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
        </svg>
        ${config.text}
      `;
      this.autoSaveIndicator.className = `text-sm ${config.class} flex items-center opacity-100`;
      
      if (status === 'saved' || status === 'error') {
        setTimeout(() => {
          if (this.autoSaveIndicator) {
            this.autoSaveIndicator.classList.add('opacity-0');
          }
        }, 2000);
      }
    }

    private setupAutoSaveListeners(): void {
      // Save on form change
      this.form?.addEventListener('input', () => {
        this.showAutoSaveStatus('saving');
      });
      
      // Save before page unload
      window.addEventListener('beforeunload', (e) => {
        if (this.hasUnsavedChanges) {
          this.autoSave();
          e.preventDefault();
          e.returnValue = '';
        }
      });
    }

    private loadSavedData(): void {
      try {
        const savedData = localStorage.getItem('contactFormData');
        if (savedData) {
          const data = JSON.parse(savedData);
          Object.entries(data).forEach(([key, value]) => {
            const input = this.form?.querySelector(`[name="${key}"]`) as HTMLInputElement;
            if (input && value) {
              input.value = value as string;
            }
          });
          this.showToast('Przywrócono zapisane dane', 'info');
        }
      } catch (error) {
        console.warn('Nie udało się załadować zapisanych danych:', error);
      }
    }

    private clearSavedData(): void {
      try {
        localStorage.removeItem('contactFormData');
      } catch (error) {
        console.warn('Nie udało się wyczyścić zapisanych danych:', error);
      }
    }

    private setupIntersectionObserver(): void {
      const observerOptions = {
        threshold: 0.1,
        rootMargin: '0px 0px -50px 0px'
      };
      
      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            entry.target.classList.add('animate-fade-in');
          }
        });
      }, observerOptions);
      
      // Observe all form fields and info cards
      const elementsToObserve = document.querySelectorAll('.form-field, .info-card, .contact-header');
      elementsToObserve.forEach(el => observer.observe(el));
    }

    private setupKeyboardNavigation(): void {
      this.form?.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' && e.target instanceof HTMLInputElement) {
          e.preventDefault();
          const inputs = Array.from(this.form?.querySelectorAll('input, textarea, select') || []);
          const currentIndex = inputs.indexOf(e.target);
          const nextInput = inputs[currentIndex + 1] as HTMLInputElement;
          
          if (nextInput) {
            nextInput.focus();
          } else if (this.submitButton && !this.submitButton.disabled) {
            this.submitButton.focus();
          }
        }
      });
    }
  }

  // Initialize form manager when DOM is ready
  document.addEventListener('DOMContentLoaded', () => {
    new ContactFormManager();
  });

  // Export for potential external use
  (window as any).ContactFormManager = ContactFormManager;
</script>
